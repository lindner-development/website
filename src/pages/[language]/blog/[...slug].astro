---
import { getCollection } from "astro:content";
import ContentPage from "../../../components/ContentPage.astro";
import { MetaBuilder } from "../../../meta";
import {
  BreadcrumbLink,
  Breadcrumbs,
} from "../../../components/Breadcrumbs/Breadcrumbs";
import { useTranslations } from "../../../i18n/utils";
export async function getStaticPaths() {
  const collection = await getCollection("blog");
  return collection.map((post) => [
    {
      params: {
        slug: post.slug,
        language: post.data.language,
      },
    },
  ]);
}

const { slug, language } = Astro.params;
const t = useTranslations((language ?? "en") as "en" | "de");

const collection = await getCollection("blog");
const post = collection.find(
  (post) => post.slug === slug && post.data.language === language
);
if (!post) throw new Error("Not found");

let builder = new MetaBuilder();
builder.title(`Lindner IT - ${post.data.title}`);
builder.description(post.data.description);
builder.revisedAt(post.data.publishDate);
if (post.data.image) builder.image(new URL(post.data.image));

builder.jsonld({
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      item: {
        "@id": `https://lindnerit.io/${post.data.language}/blog`,
        name: "Blog",
      },
    },
    {
      "@type": "ListItem",
      position: 2,
      item: {
        "@id": `https://lindnerit.io/${post.data.language}/blog`,
        name: post.data.category,
      },
    },
    {
      "@type": "ListItem",
      position: 3,
      item: {
        "@id": `https://lindnerit.io/${post.data.language}/blog/${post.slug}`,
        name: post.data.title,
      },
    },
  ],
});

builder.jsonld({
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: post.data.title,
  image: post.data.image
    ? new URL(post.data.image, "https://lindnerit.io/")
    : undefined,
  editor: post.data.author,
  genre: post.data.category,
  keywords: post.data.keywords,
  wordcount: post.body.split(" ").length,
  publisher: "Lindner IT UG (haftungsbeschr√§nkt)",
  url: `https://lindnerit.io/${post.data.language}/blog/${post.slug}`,
  datePublished: post.data.publishDate.toDateString(),
  dateCreated: post.data.publishDate.toDateString(),
  dateModified: post.data.publishDate.toDateString(),
  description: post.data.description,
  articleBody: post.body,
  author: {
    "@type": "Person",
    name: post.data.author,
  },
});

const meta = builder.create();
const links: BreadcrumbLink[] = [
  {
    href: `/${language}/`,
    title: "Lindner IT",
  },
  {
    href: `/${language}/blog`,
    title: t("blog.h1"),
  },
  {
    href: `/${language}/blog`,
    title: post.data.category,
  },
  {
    href: `/${language}/blog/${post.slug}`,
    title: post.data.title,
    isCurrent: true,
  },
];
const { Content } = await post.render();
---

<style lang="scss">
  .post {
    list-style-position: inside;
  }
</style>
<ContentPage meta={meta}>
  <Breadcrumbs links={links} />
  <div class="post">
    <h1>{post.data.title}</h1>
    <Content />
  </div>
</ContentPage>
