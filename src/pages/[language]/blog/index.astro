---
//import { getStaticPaths } from "../../../paramHelper";
//export { getStaticPaths };
export const prerender = false;

import Footer from "../../../components/Footer.astro";
import Header from "../../../components/Header.astro";
import Heading from "../../../components/Heading.astro";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import HookSection from "../../../components/HookSection.astro";
import { useTranslations } from "../../../i18n";
import { MetaBuilder } from "../../../meta";
import {
  BlogCategory,
  BlogCategorySkeleton,
  BlogPost,
  BlogPostSkeleton,
  contentfulClient,
} from "../../../contentful";
import BlogCard from "../../../components/BlogCard.astro";

const { language } = Astro.params;
const currentLanguage = language === "de" ? "de" : "en";
const t = useTranslations(currentLanguage);

const categorySkeletons =
  await contentfulClient.getEntries<BlogCategorySkeleton>({
    content_type: "blogCategory",
    locale: language == "de" ? "de" : "en-US",
  });
const blogCategories: BlogCategory[] = categorySkeletons.items.map(
  (item) => item.fields
);

const blogPostSkeletons = await contentfulClient.getEntries<BlogPostSkeleton>({
  content_type: "blogPost",
  locale: language == "de" ? "de" : "en-US",
  select: ["fields.title", "fields.slug", "fields.category", "fields.author", "fields.image", "fields.metaDescription", "sys.id", "sys.updatedAt", "sys.createdAt"]
});
const blogPosts: BlogPost[] = blogPostSkeletons.items.map(
  (item) => item.fields
);

const metaBuilder = new MetaBuilder();
metaBuilder.title(t("blog.meta.title") as string);
metaBuilder.description(
  t("blog.meta.description") as string,
  t("blog.meta.description") as string,
  t("blog.meta.openGraphDescription") as string,
  t("blog.meta.twitterDescription") as string
);
metaBuilder.keywords(t("blog.meta.keywords") as unknown as string[]);
const meta = metaBuilder.create();
---

<style lang="scss">
  @use "src/scss/typography";
  @use "src/scss/colors";

  article {
    margin: 0 6rem;
  }

  h2 {
    margin-top: 0;
  }

  .blog-cards {
    display: flex;
    flex-wrap: wrap;
    justify-content: start;
    flex-direction: row;
  }

  .category-section {
    margin-top: 2rem;
  }

  #hook {
    margin-top: 4rem;
  }
</style>
<BaseLayout {meta}>
  <main>
    <Header />
    <article>
      <Heading headingType="h1">
        <div slot="description">
          {t("blog.content.titleDescription")}
        </div>
        {t("blog.content.title")}
      </Heading>
      {
        blogCategories.map((category) => (
          <section class="category-section" id={category.slug}>
            <h2>{category.displayName}</h2>
            <div class="blog-cards">
              {blogPosts
                .filter((post) => post?.category?.fields?.slug === category.slug)
                .map((post) => (
                  <BlogCard {post}/>
                ))}
            </div>
          </section>
        ))
      }
      <section id="hook">
        <HookSection />
      </section>
    </article>
    <Footer />
  </main>
</BaseLayout>
